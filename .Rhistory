summary( df )
df <- df %>% mutate(recovery_rate = recovered / confirmed)
#####
# Save clean data
my_path <- "data/clean/"
# COVID data
write_csv( df , paste0(my_path,'covid_pop_10_09_2020_clean.csv'))
# Clear memory
rm(list=ls())
# Call the data from local file
data_path <- "data/clean/"
df <- read_csv(paste0(data_path,'covid_pop_10_09_2020_clean.csv'))
####
#
# Quick check on HISTOGRAMS
hist(df$recovery_rate)
hist(df$recovery_rate,
main = "Covid Recovery rates 10-09-20",
xlab="Recovery rates(%)",
ylab = "Number of Countries",
border="blue",
col="green",
xlim=c(0,1),
las=1,
breaks=10,
prob = TRUE)
####
#
# Quick check on HISTOGRAMS
hist(df$recovery_rate,
main = "Covid Recovery rates 10-09-20",
xlab="Recovery rates(%)",
ylab = "Number of Countries",
border="blue",
col="green",
xlim=c(0,1),
las=1,
breaks=10)
####
#
# Quick check on HISTOGRAMS
hist(df$recovery_rate,
main = "Covid Recovery rates 10-09-20",
xlab="Recovery rates(%)",
ylab = "Number of Countries",
border="blue",
col="lightgreen",
xlim=c(0,1),
las=1,
breaks=10)
hist(df$recovery_rate,
main = "Covid Recovery rates 10-09-20",
xlab="Recovery rates(%)",
ylab = "Number of Countries",
border="blue",
col="lightgreen",
xlim=c(0,1),
las=1,
breaks=10)
lines(density(df$recovery_rate))
hist(df$population, main = "Population Size", xlab="Number of Citizens",
ylab = "Number of Countries", border="blue", col="lightgreen", xlim=c(0,1), las=1,
breaks=10)
hist(df$population, main = "Population Size", xlab="Number of Citizens",
ylab = "Number of Countries", border="blue", col="lightgreen", las=1,
breaks=10)
df <- df %>% mutate(population_mi = round(population / 1000000,1))
View(df)
# Clear memory
rm(list=ls())
# Call the data from local file
data_path <- "data/clean/"
df <- read_csv(paste0(data_path,'covid_pop_10_09_2020_clean.csv'))
df <- df %>% mutate(population_mi = round(population / 1000000,1))
#####
# Save clean data
my_path <- "data/clean/"
# COVID data
write_csv( df , paste0(my_path,'covid_pop_10_09_2020_clean.csv'))
# Clear memory
rm(list=ls())
# Call the data from local file
data_path <- "data/clean/"
df <- read_csv(paste0(data_path,'covid_pop_10_09_2020_clean.csv'))
hist(df$population_mi, main = "Population Size", xlab="Number of Citizens",
ylab = "Number of Countries", border="blue", col="lightgreen", las=1,
breaks=10)
hist(df$population_mi, main = "Population Size", xlab="Number of Citizens (mi)",
ylab = "Number of Countries", border="blue", col="lightgreen", las=1,
breaks=10)
View(df)
df %>% filter(confirmed > 1000,
population > 20000)
df %>% filter(confirmed > 10000,
population > 20000)
df %>% filter(confirmed > 1000,
population > 20000)
df %>% filter(confirmed > 1000)
summary(df$recovery_rate)
boxplot(df$recovery_rate,
main = "Covid Recovery rates (%)",
xlab = "Recovery Rates(%)",
col = "orange",
border = "brown",
horizontal = TRUE,
notch = TRUE
)
df %>% filter(confirmed > 1000) %>%
boxplot(df$recovery_rate,
main = "Covid Recovery rates (%)",
xlab = "Recovery Rates(%)",
col = "orange",
border = "brown",
horizontal = TRUE,
notch = TRUE
)
df %>% filter(confirmed > 1000) %>% boxplot(df$recovery_rate,
main = "Covid Recovery rates (%)",
xlab = "Recovery Rates(%)",
col = "orange",
border = "brown",
horizontal = TRUE,
notch = TRUE
)
dfanalysis <- df %>% filter(confirmed > 1000)
View(dfanalysis)
boxplot(df$recovery_rate,
main = "Covid Recovery rates (%)",
xlab = "Recovery Rates(%)",
col = "orange",
border = "brown",
horizontal = TRUE,
notch = TRUE
)
boxplot(dfanalysis$recovery_rate,
main = "Covid Recovery rates (%)",
xlab = "Recovery Rates(%)",
col = "orange",
border = "brown",
horizontal = TRUE,
notch = TRUE
)
dfanalysis <- df %>% filter(confirmed > 5000)
boxplot(dfanalysis$recovery_rate,
main = "Covid Recovery rates (%)",
xlab = "Recovery Rates(%)",
col = "orange",
border = "brown",
horizontal = TRUE,
notch = TRUE
)
df <- read_csv(paste0(data_path,'covid_pop_10_09_2020_clean.csv'))
View(dfanalysis)
dfanalysis <- df %>% filter(confirmed > 5000,
population > 100000)
boxplot(df$recovery_rate,
main = "Covid Recovery rates (%)",
xlab = "Recovery Rates(%)",
col = "orange",
border = "brown",
horizontal = TRUE,
notch = TRUE
)
View(df)
boxplot(df$population_mi, main = "Population Size", xlab = "Number of Citizens (mi)",
col = "grey", border = "brown", horizontal = TRUE, notch = TRUE)
df <- df %>% filter(confirmed > 5000,
population > 100000)
# 1) lifeexp - gdptot: level-level model without scaling
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Total GDP (2018 int. const. $, PPP )",y = "Life expectancy  (years)")
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = population_mi , y = "Recovery Rates (%)")) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)")  +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = population_mi , y = "Recovery Rates (%)")) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)")  +
scale_x_continuous( trans = log_trans())
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = population_mi , y = "Recovery Rates (%)")) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)")  +
scale_x_continuous( trans = log_trans())
scale_x_continuous( trans = log_trans())
# You can change the scale for Total GDP for checking log-transformation
ggplot(df , aes(x = population_mi , y = recovery_rates ) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)")  +
scale_x_continuous( trans = log_trans()))
# You can change the scale for Total GDP for checking log-transformation
ggplot(df , aes(x = population_mi , y = recovery_rate ) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)")  +
scale_x_continuous( trans = log_trans()))
######
# Check basic scatter-plots!
#
# Where to use log-transformation? - level-level vs level-log vs log-level vs log-log
#
# 1) lifeexp - gdptot: level-level model without scaling
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)")
# You can change the scale for Total GDP for checking log-transformation
ggplot(df , aes(x = population_mi , y = recovery_rate ) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)")  +
scale_x_continuous( trans = log_trans()))
# You can change the scale for Total GDP for checking log-transformation
ggplot(df , aes(x = population_mi , y = recovery_rate ) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)")  +
scale_x_continuous(trans = log_trans()))
# You can change the scale for Total GDP for checking log-transformation
ggplot(df , aes(x = population , y = recovery_rate ) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)")  +
scale_x_continuous(trans = log_trans()))
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Total GDP (2018 int. const. $, PPP , ln scale )",y = "Life expectancy  (years)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000,10000) )
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)")
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)") +
ylim = c(0,1)
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)") +
ylim(0,1)
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi) , ln scale )", y = "Life expectancy  (years)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000)) +
ylim(0,1)
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi) , ln scale )", y = "Life expectancy  (years)") +
ylim(0,1) +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000))
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi) , ln scale )", y = "Life expectancy  (years)") +
ylim(0,1) +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000))
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi) , ln scale )", y = "Life expectancy  (years)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000))
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi) , ln scale )", y = "Life expectancy  (years)") +
scale_x_continuous( trans = log_trans(), breaks = c(1,2,5,10,20,50,100,200,500,1000))
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Total GDP (2018 int. const. $, PPP , ln scale )",y = "Life expectancy  (years)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000) )
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess") +
labs(x = " Population Size (mi) , ln scale )",y = "Life expectancy  (years)") +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000))
# You can change the scale for Total GDP for checking log-transformation
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess") +
labs(x = " Population Size (mi) , ln scale )",y = "Life expectancy  (years)") + ylim(0,1) +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000))
ggplot( df , aes(x = population_mi, y = recovery_rate ))  +
geom_point() +
geom_smooth(method="loess")+
labs(x = " Population Size (mi) , ln scale )",y = "Recovery Rates (%), ln scale)") +
ylim(0,1) +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000) )+
scale_y_continuous( trans = log_trans())
summary(df$population)
summary(df$population_mi)
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess") +
labs(x = " Population Size (mi) , ln scale )",y = "Recovery Rates (%)") + ylim(0,1) +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000))
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess")+
labs(x = "Population Size (mi)", y = "Recovery Rates (%)") +
ylim(0,1)
df <- df %>% mutate(ln_population_mi = log(population_mi))
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess") +
labs(x = " Population Size (mi) , ln scale )",y = "Recovery Rates (%)") + ylim(0,1) +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000))
ggplot( df , aes(x = population_mi, y = recovery_rate ))  +
geom_point() +
geom_smooth(method="loess")+
labs(x = " Population Size (mi) , ln scale )",y = "Recovery Rates (%), ln scale)") +
ylim(0,1) +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000) )+
scale_y_continuous( trans = log_trans())
ggplot( df , aes(x = population_mi , y = recovery_rate)) +
geom_point() +
geom_smooth(method="loess") +
labs(x = " Population Size (mi) , ln scale )",y = "Recovery Rates (%)") + ylim(0,1) +
scale_x_continuous( trans = log_trans(),  breaks = c(1,2,5,10,20,50,100,200,500,1000))
View(df)
###
# Two ways to handle polynomials:
#
# 1) Add powers of the variable(s) to the dataframe:
df <- df %>% mutate( ln_population_mi_sq = ln_population_mi^2,
ln_population_mi_cb = ln_population_mi^3)
View(df)
View(df)
View(df)
# Regressions
#
# Built in regression in R
reg_b <- lm(recovery_rate ~ ln_population_mi , data = df )
reg_b
summary( reg_b )
summary( reg_b )
install.packages("lmtest")
# Estimate robust SE
#install.packages("estimatr")
library(lmtest)
### Check homoskedastic - Breusch-Pagan Test
bptest( reg_b )
# First model:
reg1 <- lm_robust( recovery_rate ~ ln_population_mi , data = df , se_type = "HC2" )
View(reg1)
summary( reg1 )
ggplot( data = df, aes( x = ln_gdptot, y = lifeexp ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
ggplot( data = df, aes( x = ln_population_mi , y = recovery_rate ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' )
# Second and third model with gdptot
reg2 <- lm_robust( recovery_rate ~ ln_population_mi + ln_population_mi_sq , data = df )
summary( reg2 )
ggplot( data = df, aes( x = ln_population_mi , y = recovery_rate ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,2) , method = lm , color = 'red' )
reg3 <- lm_robust( recovery_rate ~ ln_population_mi + ln_population_mi_sq + ln_population_mi_cb , data = df )
summary ( reg3 )
summary ( reg3 )
summary ( reg3 )
summary( reg2 )
reg3 <- lm_robust( recovery_rate ~ ln_population_mi + ln_population_mi_sq + ln_population_mi_cb , data = df )
summary ( reg3 )
ggplot( data = df, aes( x = ln_population_mi , y = recovery_rate ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ poly(x,3) , method = lm , color = 'red' )
View(df)
summary(df$population_mi)
cutoff <- 10
cutoff_ln <- log( cutoff )
# Use simple regression with the lspline function
reg6 <- lm_robust(recovery_rate ~ lspline( ln_population_mi , cutoff_ln ), data = df )
summary( reg6 )
# Use simple regression with the lspline function
reg6 <- lm_robust(recovery_rate ~ lspline( ln_population_mi , cutoff_ln ), data = df )
summary( reg6 )
ggplot( data = df, aes( x = ln_population_mi, y = recovery_rate ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,cutoff_ln) , method = lm , color = 'red' )
cutoff <- 5
# 2nd we use a log transformation -> cutoff needs to be transformed as well
cutoff_ln <- log( cutoff )
# Use simple regression with the lspline function
reg6 <- lm_robust(recovery_rate ~ lspline( ln_population_mi , cutoff_ln ), data = df )
summary( reg6 )
ggplot( data = df, aes( x = ln_population_mi, y = recovery_rate ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,cutoff_ln) , method = lm , color = 'red' )
cutoff <- 10
# 2nd we use a log transformation -> cutoff needs to be transformed as well
cutoff_ln <- log( cutoff )
# Use simple regression with the lspline function
reg6 <- lm_robust(recovery_rate ~ lspline( ln_population_mi , cutoff_ln ), data = df )
summary( reg6 )
ggplot( data = df, aes( x = ln_population_mi, y = recovery_rate ) ) +
geom_point( color='blue') +
geom_smooth( formula = y ~ lspline(x,cutoff_ln) , method = lm , color = 'red' )
data_out <- "out/"
htmlreg( list(reg1 , reg2 , reg3 , reg6),
type = 'html',
custom.model.names = c("Population Size - linear","Population Size - quadratic","Population Size - cubic",
"GDP/capita - PLS"),
caption = "Modelling recovery_rates of countries",
file = paste0( data_out ,'model_comparison.html'), include.ci = FALSE)
data_out <- "out/"
htmlreg( list(reg1 , reg2 , reg3 , reg6),
type = 'html',
custom.model.names = c("Population Size - linear","Population Size - quadratic","Population Size - cubic",
"GDP/capita - PLS"),
caption = "Modelling recovery_rates of countries",
file = paste0( data_out ,'model_comparison.html'), include.ci = FALSE)
##
# 1) Coefficient is equal to 0:
# Implemented by default...
summary( reg3 )
# 2) Coefficient is equal to your favorite value
library(car)
##
# 1) Coefficient is equal to 0:
# Implemented by default...
summary( reg2 )
# Let test: H0:  = 0, HA: ln_gdppc neq 5
linearHypothesis( reg2 , "ln_population_mi = 0")
linearHypothesis( reg2 , "ln_population_mi = 0")
# Get the predicted y values from the model
df$reg2_y_pred <- reg2$fitted.values
View(df)
# Calculate the errors of the model
df$reg2_res <- df$recovery_rate - df$reg2_y_pred
df %>% top_n( -5 , reg2_res ) %>%
select( country , lifeexp , reg2_y_pred , reg2_res )
df %>% top_n( -5 , reg2_res ) %>%
select( country , recovery_rate , reg2_y_pred , reg2_res )
# Find countries with largest positive errors
df %>% top_n( 5 , reg2_res ) %>%
select( country , recovery_rate , reg2_y_pred , reg2_res )
ggplot( data = df, aes( x = ln_population_mi , y = recovery_rate ) ) +
geom_point( color='blue') +
geom_smooth( method = lm , color = 'red' , se = T )
##
# You can get them by predict function
#   interval can be any of c("none", "confidence", "prediction")
#   alpha = 0.05 (default) is the significance level
###
# CI of regression line
pred4_CI <- predict( reg2, newdata = df , interval ="confidence" , alpha = 0.05 )
##
# You can get them by predict function
#   interval can be any of c("none", "confidence", "prediction")
#   alpha = 0.05 (default) is the significance level
###
# CI of regression line
pred2_CI <- predict( reg2, newdata = df , interval ="confidence" , alpha = 0.05 )
pred2_CI
# Hand made CI for regression line
# 1) Add to datatset:
df <- df %>% mutate( CI_reg2_lower = pred2_CI$fit[,2],
CI_reg2_upper = pred2_CI$fit[,3] )
# 2) Plot
ggplot(  ) +
geom_point( data = df, aes( x = ln_population_mi , y = recovery_rate ) , color='blue') +
geom_line( data = df, aes( x = ln_population_mi, y = reg2_y_pred ) , color = 'red' , size = 1 ) +
geom_line( data = df, aes( x = ln_population_mi, y = CI_reg2_lower ) , color = 'green' ,
size = 1 , linetype = "dashed" ) +
geom_line( data = df, aes( x = ln_population_mi, y = CI_reg2_upper ) , color = 'black' ,
size = 1 , linetype = "dashed" ) +
labs(x = "ln( Population Size (mi) )",y = "Recovery Rates (%)")
##
# Now we change to get the prediction intervals!
#
pred2_PI <- predict( reg2, newdata = df , interval ="prediction" , alpha = 0.05 )
df <- df %>% mutate( PI_reg2_lower = pred4_PI$fit[,2],
PI_reg2_upper = pred4_PI$fit[,3] )
# 2) Plot
df <- df %>% mutate( PI_reg2_lower = pred2_PI$fit[,2],
PI_reg2_upper = pred2_PI$fit[,3] )
# 2) Plot
ggplot(  ) +
geom_point( data = df, aes( x = ln_population_mi, y = recovery_rate ) , color='blue') +
geom_line( data = df, aes( x = ln_population_mi, y = reg2_y_pred ) , color = 'red' , size = 1 ) +
geom_line( data = df, aes( x = ln_population_mi, y = PI_reg2_lower ) , color = 'green' ,
size = 1 , linetype = "dotted" ) +
geom_line( data = df, aes( x = ln_population_mi, y = PI_reg2_upper ) , color = 'black' ,
size = 1 , linetype = "dotted" ) +
labs(x = "ln( GDP/capita, 2018 int. const. $, PPP)",y = "Life expectancy  (years)")
